#!/usr/bin/perl
######################################################################
# Prelude
######################################################################

# Yes I know about autoconf ... and autoconf sux.

# assume standard: diff
# assume standard: perl

# TODO: -enable-gif, -enable-mp3, etc

my $bt = 0;

######################################################################
# Side effects
######################################################################

######################################################################
# Helpers
######################################################################
BEGIN { die "need Perl 5 or greater" if $] < 5 ; }

#use Common;
sub pr2 { print STDERR "@_\n" }
sub cat {
    my ($what) = @_;
    my @list;
    open(TMP, $what);
    while(<TMP>) { push @list, "$_"; }
    \@list;
}
sub notb   { !$_[0] }
sub mapf   { my ($f, $xs) = @_; [ map { &$f($_) } @{$xs} ] }
sub plural { my ($e) = @_; if ($e > 1) { "s" } else { "" } }

sub check_config { my ($command, $expect, $msggood, $msgbad) = @_;
    my $error = 0;

    my $full = cat($command);
    my $res = join(" ", @{$full});
#	       pr2 $res;
    if(notb($res =~ $expect)) { $error++; pr2 "!!!! $msgbad !!!!"; }
    else { pr2 $msggood }
    return $error;
}

######################################################################
# Let's go, part 1 (core LFS)
######################################################################
pr2 "Checking your configuration.\n";

my $error = 0; # fatal
my $error2 = 0; # not fatal



#---------------------------------------------------------------------
# Compilers and runtimes
#---------------------------------------------------------------------

$error += check_config
    ("echo \"1;;\\n\" | ocaml |",
     "Objective(.*) 3.*",
     "OCaml (the wonderful language) is present.",
     "The program ocaml is missing or is not a good version. We need at least 3.08",
     );

######################################################################
# Generate config files (platform/portability issues)
######################################################################
######################################################################
# Generate globals files (features issues)
######################################################################

######################################################################
# Diagnostic for core
######################################################################

if($error) {
    pr2 "
----------------------------------------------------------------------
!!!! There seems to have problem, we have found $error missing package" .
plural($error) . ".
" . (($error > 1) ? "Some of those packages" : "This package") .
" may be installed by picking "
. ($error > 1 ? "them" : "it") . " in lfs-dependencies.tgz available
on the LFS website. !!!!
----------------------------------------------------------------------
";
    exit 0;
}

pr2 "";
pr2 "----------------------------------------------------------------------\n";

pr2 "All seems fine for the application version of LFS.\n";
pr2 "To compile the application version of LFS type:
 make coredemo

Then, to test the application version of LFS simply type:
 ./coredemo

You will need some knowledge of OCaml (but who doesn't this day?).
The file demo.ml contains examples of interaction.

----------------------------------------------------------------------
";


######################################################################
# Let's go part 2 (real LFS)
######################################################################

#todo:
# in fact having a fusermount or db_archive is neither necessary nor
# sufficient (db_archive works even if the db_dev package is not installed)
# but by requiring that we have at least more confidence
#todo: could either require dbm or bdb  and adjust the compilation
#todo: mettre dans les msg  par quoi ils sont utilisés
# (persistence,  for jpg plugin, for glimpse: query, ...)

$error += check_config("camlidl -help| ",
		       "Usage: camlidl.*",
                       "camlidl is present.",
                        "camlidl seems not to be installed",
                      );

$error += check_config("fusermount 2>&1 | ",
		       ".*fusermount: missing mountpoint argument",
                       "Fuse is present.",
                        "Fuse seems not to be installed",
                      );

$error += check_config("ls /usr/include/fuse.h /usr/local/include/fuse.h|",
		       "/usr/.*/fuse.h\$",
                       "Fuse development library is present.",
                        "Fuse development library seems not to be installed",
                      );

# now it's #define	DB_VERSION_STRING	"Berkeley DB 4.5.20: (September
$error += check_config("grep DB_VERSION_STRING /usr/include/db.h|",
#                      ".*Sleepycat Software: Berkeley DB 4.[345].*",
                      ".*Berkeley DB 4.[345].*",
                      "Berkeley DB is present.",
                      "Berkeley DB seems not to be installed.",
                      );


#why gdbm ? cos worse than bdb
# - because simpler/more standard  to install
# - because works (bdb have bugs)
# - because work over NFS
$error += check_config
    ("echo 'open Dbm;;' | ocaml 2>&1 |",
    "# #",
    "Dbm is present.",
    "Dbm seems not to be installed.",
    );


pr2 "";


#---------------------------------------------------------------------
# For plugins
#---------------------------------------------------------------------
mapf(sub { my ($e) = @_;
	   $error2 += check_config
               ("perl -M$e -e 'print \"ok\"' 2>&1 |",
                "ok",
                "module $e.pm present.",
                "The module $e.pm seems not to be installed.",
                );
       }, [qw(
	      MP3::Info
	      MP3::Tag
	      Compress::Zlib
              )]);

$error2 += check_config
    ("pmc 2>&1 |",
    "pmc: Usage is \"pmc (.*dryrun.*guru.*) ... \"",
    "LambdaProlog (another wonderful language) is present.",
    "LambdaProlog seems not to be installed",
    );

$error2 += check_config
    ("ogginfo 2>&1 |",
    "Usage:.*ogginfo.*file.*.ogg",
    "ogginfo (used by the ogg transducer) is present.",
    "ogginfo seems not to be installed",
    );

#$error2 += check_config("gprolog --help 2>&1 |",
#		       "Usage: gprolog",
#		       "program gprolog present.",
#		       "The program gprolog is missing.",
#		      );
#
$error2 += check_config("glimpse 2>&1 |",
		       "This is glimpse version",
		       "glimpse is present.",
		       "The program glimpse is missing.",
		      );

$error2 += check_config("catdoc -V 2>&1 |",
		       "Catdoc Version.*",
		       "catdoc is present.",
		       "The program catdoc is missing.",
		      );
# pdftotext
# ps2ascii

$error2 += check_config("jpeginfo -V 2>&1 |",
		       "jpeginfo v1.6.*",
		       "jpeginfo is present.",
		       "The program jpeginfo is missing.",
		      );

$error2 += check_config("gifinfo --help 2>&1 |",
		       "Error in command line parsing.*GifInfo.*GifFile",
		       "gifinfo is present.",
		       "The program gifinfo is missing.",
		      );


######################################################################
# Diagnostic for real LFS
######################################################################

pr2 "";
pr2 "----------------------------------------------------------------------\n";

if($error) {
    pr2
"!!!! Fuse or Dbm library or Berkeley DB is not correctly installed, you will
not be able to test the filesystem version of LFS.
It may be installed by picking it in lfs-dependencies.tgz available on the
LFS website. !!!!
";
 exit 0;
}

if($error2) {
    pr2
"\n!!!! You can try to compile and test the filesystem version of LFS,
but some features or plugins may be missing. !!!!\n
We have found $error2 missing package" . plural($error2) . ". " .
(($error2 > 1) ? "Some of those packages" : "This package") .
" may be installed
by picking " . ($error2 > 1 ? "them" : "it") .
" in lfs-dependencies.tgz available on the LFS website. !!!!
";
}
else {
    pr2"\nAll seems fine too for the filesystem version of LFS.\n";
}

pr2 "To compile and install the filesystem version of LFS type:
 make
 make install

Then, to test the filesystem version of LFS simply type:
 mkfs.lfs  /your/meta_data_place/
 mount.lfs /your/meta_data_place/ /your/mount_point
 cd /your/mount_point/
Use umount.lfs /your/mount_point to umount LFS.

";
pr2 "----------------------------------------------------------------------\n";



######################################################################
# Prefix
######################################################################

my $prefix="/usr/local";
if($ARGV[0] =~ "--prefix=(.*)") {
    $prefix = $1;
}
my $lfssrc="$prefix/share/lfs";

pr2 "LFS target directory: $prefix";
pr2 "Generating Makefile.config";
open(CONFIG, ">Makefile.config");
print CONFIG "# autogenerated by configure

# Where to install the binary
BINDIR=$prefix/bin

# Where to install the man pages
MANDIR=$prefix/man

SHAREDIR=$lfssrc

# Features
FEATURE_BACKTRACE=$bt
";

pr2 "Generating commons/features.ml";
`cpp -DFEATURE_BACKTRACE=$bt commons/features.ml.in > commons/features.ml`;

pr2 "Modifying globals/config_lfs.ml";
my $command = "perl -p -i -e 's#Not_found.\*#Not_found->\\\"$lfssrc\\\"#' globals/config_lfs.ml";
`$command`;




