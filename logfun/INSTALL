----------------------------------------------
| Logfun 1.3.1 - a toolbox of logic functors |
----------------------------------------------

author: Sébastien Ferré <ferre@irisa.fr>
date: 01/03/2006

reference paper:

@InProceedings{FerRid2001b,
  author = 	 {S. Ferré and O. Ridoux},
  title = 	 {A Framework for Developing Embeddable Customized Logics},
  booktitle = 	 {Int. Work. Logic-based Program Synthesis and Transformation},
  year = 	 {2002},
  editor = 	 {A. Pettorossi},
  series =       {LNCS 2372},
  publisher =    {Springer},
  pages =        {191--215},
  keywords =     {logic, composition, theorem prover, logic-based systems},
  abstract =     {
	Logic-based applications often use customized logics which are
	composed of several logics. These customized logics are also often
	embedded as a black-box in an application. Their implementation
	requires the specification of a well-defined interface with common
	operations such as a parser, a printer, and a theorem prover. In order
	to be able to compose these logics, one must also define composition
	laws, and prove their properties. We present the principles of logic
	functors and their compositions for constructing customized logics. An
	important issue is how the operations of different sublogics
	inter-operate.  We propose a formalization of the logic functors,
	their semantics, implementations, and their composition.},
}

A research report is also provided as the file 'doc/ResearchReportInria4457.pdf'.

1. Requirements
---------------

- Objective Caml 3.08 or any higher version

- Linux or Windows/Cygwin,
  but should also work on Unix, MacOS-X, and Native Windows

2. Installation
---------------

- unzip and untar the file logfun-1.2.tar.gz

  % gunzip logfun-1.3.1.tar.gz
  % tar xf logfun-1.3.1.tar

- move into the created directory

  % cd logfun-1.3.1

- execute make to create the OCaml library

  % make all

  This builds an OCaml library 'logfun.cmxa' that must be linked in
  programs using it.

  The default is to compile in native code, but this can be changed
  to bytecode by a simple editing at the head of the makefile.

- [opt] HTML documentation by 'ocamldoc'

  % make html

  This automatically generates HTML documentation in the subdirectory
  'ocamldoc': open the file 'ocamldoc/index.html' in your browser.
  (Unfortunately this documentation only contains the signature and
  implementation of modules, and no comment.)

- install the produced library among other OCaml libraries

  % make install

  This create a new directory 'logfun' in $CAMLLIB (you may need root
  privileges for this, unless you have installed OCaml yourself).

- [opt] compile examples of simple program defining and using a logic
  built with Logfun

  % cd examples
  % make all

  This creates 2 programs 'ijcar_alc.exe' and 'ijcar_lis.exe' that build
  some logics, and displays their properties and a subsumption test.

  % ijcar_alc.exe
  ...

3. Use
------

To write an application based on a logic, you first have to define
it like in example programs in subdirectory 'examples'. You can then
use it as any OCaml module.

To compile it, reuse the makefile in subdirectory 'examples'. (The
libraries 'unix', 'nums', and 'str' come with the standard distribution
of Objective Caml.)

If in some directory, you have a program <name>.ml, and the example
makefile, then you can compile it as

  % make <name>.exe

which produce the executable program <name>.exe
